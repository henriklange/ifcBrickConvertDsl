/*
 * generated by Xtext 2.12.0
 */
package org.xtext.ifcbrickconvert.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ifcbrickconvert.ide.contentassist.antlr.internal.InternalIfcBrickParser;
import org.xtext.ifcbrickconvert.services.IfcBrickGrammarAccess;

public class IfcBrickParser extends AbstractContentAssistParser {

	@Inject
	private IfcBrickGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalIfcBrickParser createParser() {
		InternalIfcBrickParser result = new InternalIfcBrickParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
					put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
					put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
					put(grammarAccess.getDataAccess().getGroup(), "rule__Data__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityWithIdAccess().getGroup(), "rule__EntityWithId__Group__0");
					put(grammarAccess.getEntityTerminatedAccess().getGroup(), "rule__EntityTerminated__Group__0");
					put(grammarAccess.getAttributeCollectionAccess().getGroup(), "rule__AttributeCollection__Group__0");
					put(grammarAccess.getAttributeCollectionAccess().getGroup_2(), "rule__AttributeCollection__Group_2__0");
					put(grammarAccess.getAttributeAccess().getGroup_2(), "rule__Attribute__Group_2__0");
					put(grammarAccess.getEntIdAccess().getGroup(), "rule__EntId__Group__0");
					put(grammarAccess.getCSVAccess().getGroup(), "rule__CSV__Group__0");
					put(grammarAccess.getRootAccess().getHeaderAssignment_2(), "rule__Root__HeaderAssignment_2");
					put(grammarAccess.getRootAccess().getDataAssignment_3(), "rule__Root__DataAssignment_3");
					put(grammarAccess.getHeaderAccess().getHeaderEntitiesAssignment_2(), "rule__Header__HeaderEntitiesAssignment_2");
					put(grammarAccess.getDataAccess().getEntityWithIdsAssignment_2(), "rule__Data__EntityWithIdsAssignment_2");
					put(grammarAccess.getEntityAccess().getDefinitionAssignment_0(), "rule__Entity__DefinitionAssignment_0");
					put(grammarAccess.getEntityAccess().getAttributeCollectionAssignment_1(), "rule__Entity__AttributeCollectionAssignment_1");
					put(grammarAccess.getEntityWithIdAccess().getEidAssignment_0(), "rule__EntityWithId__EidAssignment_0");
					put(grammarAccess.getEntityWithIdAccess().getEntityAssignment_2(), "rule__EntityWithId__EntityAssignment_2");
					put(grammarAccess.getEntityTerminatedAccess().getEntityAssignment_0(), "rule__EntityTerminated__EntityAssignment_0");
					put(grammarAccess.getAttributeCollectionAccess().getAttributesAssignment_1(), "rule__AttributeCollection__AttributesAssignment_1");
					put(grammarAccess.getAttributeCollectionAccess().getAttributesAssignment_2_1(), "rule__AttributeCollection__AttributesAssignment_2_1");
					put(grammarAccess.getAttributeAccess().getXAssignment_0(), "rule__Attribute__XAssignment_0");
					put(grammarAccess.getAttributeAccess().getEidAssignment_1(), "rule__Attribute__EidAssignment_1");
					put(grammarAccess.getAttributeAccess().getXAssignment_2_1(), "rule__Attribute__XAssignment_2_1");
					put(grammarAccess.getAttributeAccess().getCAssignment_3(), "rule__Attribute__CAssignment_3");
					put(grammarAccess.getAttributeAccess().getEAssignment_4(), "rule__Attribute__EAssignment_4");
					put(grammarAccess.getAttributeAccess().getAcAssignment_5(), "rule__Attribute__AcAssignment_5");
					put(grammarAccess.getAttributeAccess().getUAssignment_6(), "rule__Attribute__UAssignment_6");
					put(grammarAccess.getAttributeAccess().getUAssignment_7(), "rule__Attribute__UAssignment_7");
					put(grammarAccess.getAttributeAccess().getSAssignment_8(), "rule__Attribute__SAssignment_8");
					put(grammarAccess.getAttributeAccess().getIAssignment_9(), "rule__Attribute__IAssignment_9");
					put(grammarAccess.getAttributeAccess().getDAssignment_10(), "rule__Attribute__DAssignment_10");
					put(grammarAccess.getAttributeAccess().getNAssignment_11(), "rule__Attribute__NAssignment_11");
					put(grammarAccess.getEntIdAccess().getIdAssignment_1(), "rule__EntId__IdAssignment_1");
					put(grammarAccess.getCSVAccess().getAAssignment_0(), "rule__CSV__AAssignment_0");
					put(grammarAccess.getCSVAccess().getBAssignment_2(), "rule__CSV__BAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IfcBrickGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IfcBrickGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
