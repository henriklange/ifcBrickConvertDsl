/**
 * generated by Xtext 2.12.0
 */
package org.xtext.ifcbrickconvert.generator;

import com.google.common.collect.Iterators;
import java.util.HashMap;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.ifcbrickconvert.ifcBrick.Attribute;
import org.xtext.ifcbrickconvert.ifcBrick.AttributeCollection;
import org.xtext.ifcbrickconvert.ifcBrick.Data;
import org.xtext.ifcbrickconvert.ifcBrick.EntityWithId;
import org.xtext.ifcbrickconvert.ifcBrick.Root;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class IfcBrickGenerator extends AbstractGenerator {
  private HashMap<Integer, String> buildings = new HashMap<Integer, String>();
  
  private HashMap<Integer, String> floors = new HashMap<Integer, String>();
  
  private HashMap<Integer, String> rooms = new HashMap<Integer, String>();
  
  private HashMap<Integer, AttributeCollection> relaggregates = new HashMap<Integer, AttributeCollection>();
  
  private HashMap<Integer, String> roofs = new HashMap<Integer, String>();
  
  private HashMap<Integer, String> zones = new HashMap<Integer, String>();
  
  private HashMap<Integer, String> usedZones = new HashMap<Integer, String>();
  
  private HashMap<Integer, AttributeCollection> relAssignsToGroups = new HashMap<Integer, AttributeCollection>();
  
  private HashMap<Integer, Integer> roomsInZones = CollectionLiterals.<Integer, Integer>newHashMap();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Data data = IteratorExtensions.<Root>head(Iterators.<Root>filter(resource.getAllContents(), Root.class)).getData();
    this.extractElements(data);
    fsa.generateFile(
      resource.getURI().lastSegment().replace(".ifc", ".ttl"), 
      this.generateData(data));
    /* Iterators.<Root>filter(resource.getAllContents(), Root.class); */
  }
  
  public void extractElements(final Data data) {
    this.buildings.clear();
    this.floors.clear();
    this.rooms.clear();
    this.relaggregates.clear();
    this.roofs.clear();
    this.zones.clear();
    this.usedZones.clear();
    this.relAssignsToGroups.clear();
    this.roomsInZones.clear();
    this.setContinuator("");
    EList<EntityWithId> _entityWithIds = data.getEntityWithIds();
    for (final EntityWithId ewi : _entityWithIds) {
      {
        String _lowerCase = ewi.getEntity().getDefinition().toLowerCase();
        if (_lowerCase != null) {
          switch (_lowerCase) {
            case "ifcbuilding":
              int _id = ewi.getEid().getId();
              int _id_1 = ewi.getEid().getId();
              String _plus = ("building" + Integer.valueOf(_id_1));
              this.buildings.put(Integer.valueOf(_id), _plus);
              break;
            case "ifcbuildingstorey":
              this.floors.put(
                Integer.valueOf(ewi.getEid().getId()), 
                ewi.getEntity().getAttributeCollection().getAttributes().get(2).getS().replace("\'", "").replace(" ", "_").replace(":", "_"));
              break;
            case "ifcspace":
              String _s = ewi.getEntity().getAttributeCollection().getAttributes().get(7).getS();
              String _s_1 = ewi.getEntity().getAttributeCollection().getAttributes().get(2).getS();
              this.rooms.put(
                Integer.valueOf(ewi.getEid().getId()), 
                (_s + _s_1).replace("\'", "").replace(" ", "_").replace(":", "_"));
              break;
            case "ifcrelaggregates":
              this.relaggregates.put(
                Integer.valueOf(ewi.getEntity().getAttributeCollection().getAttributes().get(4).getEid().getId()), 
                ewi.getEntity().getAttributeCollection().getAttributes().get(5).getAc());
              break;
            case "ifcroof":
              int _id_2 = ewi.getEid().getId();
              int _id_3 = ewi.getEid().getId();
              String _plus_1 = ("roof" + Integer.valueOf(_id_3));
              this.roofs.put(Integer.valueOf(_id_2), _plus_1);
              break;
            case "ifcgroup":
              int _id_4 = ewi.getEid().getId();
              int _id_5 = ewi.getEid().getId();
              String _plus_2 = ("zone" + Integer.valueOf(_id_5));
              this.zones.put(Integer.valueOf(_id_4), _plus_2);
              break;
            case "ifczone":
              int _id_6 = ewi.getEid().getId();
              int _id_7 = ewi.getEid().getId();
              String _plus_3 = ("zone" + Integer.valueOf(_id_7));
              this.zones.put(Integer.valueOf(_id_6), _plus_3);
              break;
            case "ifcrelassignstogroup":
              this.relAssignsToGroups.put(
                Integer.valueOf(ewi.getEntity().getAttributeCollection().getAttributes().get(6).getEid().getId()), 
                ewi.getEntity().getAttributeCollection().getAttributes().get(4).getAc());
              break;
          }
        }
        Set<Integer> _keySet = this.zones.keySet();
        for (final Integer zone : _keySet) {
          boolean _containsKey = this.relAssignsToGroups.containsKey(zone);
          if (_containsKey) {
            EList<Attribute> _attributes = this.relAssignsToGroups.get(zone).getAttributes();
            for (final Attribute room : _attributes) {
              boolean _containsKey_1 = this.rooms.containsKey(Integer.valueOf(room.getEid().getId()));
              if (_containsKey_1) {
                this.roomsInZones.put(Integer.valueOf(room.getEid().getId()), zone);
                boolean _containsKey_2 = this.usedZones.containsKey(zone);
                boolean _not = (!_containsKey_2);
                if (_not) {
                  this.usedZones.put(zone, this.zones.get(zone));
                }
              }
            }
          }
        }
      }
    }
  }
  
  private String continuator = "";
  
  public String setContinuator(final String c) {
    return this.continuator = c;
  }
  
  public boolean getContinuator() {
    boolean _equals = this.continuator.equals("");
    if (_equals) {
      return false;
    } else {
      return true;
    }
  }
  
  public CharSequence generateData(final Data data) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@prefix bf: <https://brickschema.org/schema/1.0.1/BrickFrame#> .");
    _builder.newLine();
    _builder.append("@prefix bldg: <http://buildsys.org/ontologies/bldg#> .");
    _builder.newLine();
    _builder.append("@prefix brick: <https://brickschema.org/schema/1.0.1/Brick#> .");
    _builder.newLine();
    _builder.append("@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .");
    _builder.newLine();
    _builder.append("@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .");
    _builder.newLine();
    _builder.append("@prefix xml: <http://www.w3.org/XML/1998/namespace> .");
    _builder.newLine();
    _builder.append("@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .");
    _builder.newLine();
    _builder.newLine();
    {
      Set<Integer> _keySet = this.buildings.keySet();
      for(final Integer building : _keySet) {
        _builder.append("bldg:");
        String _get = this.buildings.get(building);
        _builder.append(_get);
        _builder.append(" a brick:Building ");
        {
          boolean _containsKey = this.relaggregates.containsKey(building);
          if (_containsKey) {
            {
              EList<Attribute> _attributes = this.relaggregates.get(building).getAttributes();
              for(final Attribute rel : _attributes) {
                {
                  boolean _containsKey_1 = this.floors.containsKey(Integer.valueOf(rel.getEid().getId()));
                  if (_containsKey_1) {
                    {
                      boolean _continuator = this.getContinuator();
                      if (_continuator) {
                        _builder.append(" ,");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("bldg:");
                        String _get_1 = this.floors.get(Integer.valueOf(rel.getEid().getId()));
                        _builder.append(_get_1, "\t\t\t");
                      } else {
                        _builder.append(" ;");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("bf:hasPart bldg:");
                        String _get_2 = this.floors.get(Integer.valueOf(rel.getEid().getId()));
                        _builder.append(_get_2, "\t\t");
                        String _setContinuator = this.setContinuator(" ");
                        _builder.append(_setContinuator, "\t\t");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append(" .");
        String _setContinuator_1 = this.setContinuator("");
        _builder.append(_setContinuator_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Set<Integer> _keySet_1 = this.floors.keySet();
      for(final Integer floor : _keySet_1) {
        _builder.append("bldg:");
        String _get_3 = this.floors.get(floor);
        _builder.append(_get_3);
        _builder.append(" a brick:Floor ");
        {
          boolean _containsKey_2 = this.relaggregates.containsKey(floor);
          if (_containsKey_2) {
            {
              EList<Attribute> _attributes_1 = this.relaggregates.get(floor).getAttributes();
              for(final Attribute rel_1 : _attributes_1) {
                {
                  boolean _containsKey_3 = this.rooms.containsKey(Integer.valueOf(rel_1.getEid().getId()));
                  if (_containsKey_3) {
                    {
                      boolean _continuator_1 = this.getContinuator();
                      if (_continuator_1) {
                        _builder.append(" ,");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("bldg:");
                        String _get_4 = this.rooms.get(Integer.valueOf(rel_1.getEid().getId()));
                        _builder.append(_get_4, "\t\t");
                      } else {
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("bf:hasPart bldg:");
                        String _get_5 = this.rooms.get(Integer.valueOf(rel_1.getEid().getId()));
                        _builder.append(_get_5, "\t");
                        String _setContinuator_2 = this.setContinuator(" ");
                        _builder.append(_setContinuator_2, "\t");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append(" .");
        _builder.newLineIfNotEmpty();
        String _setContinuator_3 = this.setContinuator("");
        _builder.append(_setContinuator_3);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Set<Integer> _keySet_2 = this.usedZones.keySet();
      for(final Integer zone : _keySet_2) {
        _builder.append("bldg:");
        String _get_6 = this.usedZones.get(zone);
        _builder.append(_get_6);
        _builder.append(" a brick:HVAC_Zone");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Set<Integer> _keySet_3 = this.rooms.keySet();
      for(final Integer room : _keySet_3) {
        _builder.append("bldg:");
        String _get_7 = this.rooms.get(room);
        _builder.append(_get_7);
        _builder.append(" a brick:Room");
        {
          boolean _containsKey_4 = this.roomsInZones.containsKey(room);
          if (_containsKey_4) {
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("bf:isPartOf bldg:");
            String _get_8 = this.zones.get(this.roomsInZones.get(room));
            _builder.append(_get_8, "\t");
          }
        }
        _builder.append(" .");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      Set<Integer> _keySet_4 = this.roofs.keySet();
      for(final Integer roof : _keySet_4) {
        _builder.append("bldg:");
        String _get_9 = this.roofs.get(roof);
        _builder.append(_get_9);
        _builder.append(" a brick:Roof .");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
}
