/*
 * generated by Xtext 2.12.0
 */
package org.xtext.ifcbrickconvert.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.ifcbrickconvert.ifcBrick.Attribute;
import org.xtext.ifcbrickconvert.ifcBrick.AttributeCollection;
import org.xtext.ifcbrickconvert.ifcBrick.CSV;
import org.xtext.ifcbrickconvert.ifcBrick.Data;
import org.xtext.ifcbrickconvert.ifcBrick.EntId;
import org.xtext.ifcbrickconvert.ifcBrick.Entity;
import org.xtext.ifcbrickconvert.ifcBrick.EntityTerminated;
import org.xtext.ifcbrickconvert.ifcBrick.EntityWithId;
import org.xtext.ifcbrickconvert.ifcBrick.Header;
import org.xtext.ifcbrickconvert.ifcBrick.IfcBrickPackage;
import org.xtext.ifcbrickconvert.ifcBrick.Root;
import org.xtext.ifcbrickconvert.services.IfcBrickGrammarAccess;

@SuppressWarnings("all")
public class IfcBrickSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IfcBrickGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IfcBrickPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IfcBrickPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case IfcBrickPackage.ATTRIBUTE_COLLECTION:
				sequence_AttributeCollection(context, (AttributeCollection) semanticObject); 
				return; 
			case IfcBrickPackage.CSV:
				sequence_CSV(context, (CSV) semanticObject); 
				return; 
			case IfcBrickPackage.DATA:
				sequence_Data(context, (Data) semanticObject); 
				return; 
			case IfcBrickPackage.ENT_ID:
				sequence_EntId(context, (EntId) semanticObject); 
				return; 
			case IfcBrickPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case IfcBrickPackage.ENTITY_TERMINATED:
				sequence_EntityTerminated(context, (EntityTerminated) semanticObject); 
				return; 
			case IfcBrickPackage.ENTITY_WITH_ID:
				sequence_EntityWithId(context, (EntityWithId) semanticObject); 
				return; 
			case IfcBrickPackage.HEADER:
				sequence_Header(context, (Header) semanticObject); 
				return; 
			case IfcBrickPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AttributeCollection returns AttributeCollection
	 *
	 * Constraint:
	 *     ((attributes+=Attribute attributes+=Attribute+) | attributes+=Attribute+)?
	 */
	protected void sequence_AttributeCollection(ISerializationContext context, AttributeCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         x=ID | 
	 *         eid=EntId | 
	 *         x=ID | 
	 *         c=CSV | 
	 *         e=Entity | 
	 *         ac=AttributeCollection | 
	 *         u='$' | 
	 *         u='*' | 
	 *         s=XSTRING | 
	 *         i=INT | 
	 *         d=DOUBLE | 
	 *         n=NUMBER
	 *     )
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSV returns CSV
	 *
	 * Constraint:
	 *     (a=INT b=INT)
	 */
	protected void sequence_CSV(ISerializationContext context, CSV semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.CSV__A) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.CSV__A));
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.CSV__B) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.CSV__B));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCSVAccess().getAINTTerminalRuleCall_0_0(), semanticObject.getA());
		feeder.accept(grammarAccess.getCSVAccess().getBINTTerminalRuleCall_2_0(), semanticObject.getB());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Data returns Data
	 *
	 * Constraint:
	 *     entityWithIds+=EntityWithId+
	 */
	protected void sequence_Data(ISerializationContext context, Data semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntId returns EntId
	 *
	 * Constraint:
	 *     id=INT
	 */
	protected void sequence_EntId(ISerializationContext context, EntId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.ENT_ID__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.ENT_ID__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntIdAccess().getIdINTTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntityTerminated returns EntityTerminated
	 *
	 * Constraint:
	 *     entity=Entity
	 */
	protected void sequence_EntityTerminated(ISerializationContext context, EntityTerminated semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.ENTITY_TERMINATED__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.ENTITY_TERMINATED__ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityTerminatedAccess().getEntityEntityParserRuleCall_0_0(), semanticObject.getEntity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntityWithId returns EntityWithId
	 *
	 * Constraint:
	 *     (eid=EntId entity=Entity)
	 */
	protected void sequence_EntityWithId(ISerializationContext context, EntityWithId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.ENTITY_WITH_ID__EID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.ENTITY_WITH_ID__EID));
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.ENTITY_WITH_ID__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.ENTITY_WITH_ID__ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityWithIdAccess().getEidEntIdParserRuleCall_0_0(), semanticObject.getEid());
		feeder.accept(grammarAccess.getEntityWithIdAccess().getEntityEntityParserRuleCall_2_0(), semanticObject.getEntity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (definition=ID attributeCollection=AttributeCollection)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.ENTITY__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.ENTITY__DEFINITION));
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.ENTITY__ATTRIBUTE_COLLECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.ENTITY__ATTRIBUTE_COLLECTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityAccess().getDefinitionIDTerminalRuleCall_0_0(), semanticObject.getDefinition());
		feeder.accept(grammarAccess.getEntityAccess().getAttributeCollectionAttributeCollectionParserRuleCall_1_0(), semanticObject.getAttributeCollection());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Header returns Header
	 *
	 * Constraint:
	 *     headerEntities+=EntityTerminated+
	 */
	protected void sequence_Header(ISerializationContext context, Header semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     (header=Header data=Data)
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.ROOT__HEADER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.ROOT__HEADER));
			if (transientValues.isValueTransient(semanticObject, IfcBrickPackage.Literals.ROOT__DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IfcBrickPackage.Literals.ROOT__DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRootAccess().getHeaderHeaderParserRuleCall_2_0(), semanticObject.getHeader());
		feeder.accept(grammarAccess.getRootAccess().getDataDataParserRuleCall_3_0(), semanticObject.getData());
		feeder.finish();
	}
	
	
}
